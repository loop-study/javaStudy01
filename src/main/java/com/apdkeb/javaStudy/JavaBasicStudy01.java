package com.apdkeb.javaStudy;

public class JavaBasicStudy01 {

    public static void main(String[] args) {

        // 자바 기초를 금방 마스터해보장
        System.out.println("java basic start");

        // 백기선 센세의 자바스터디 1주차 과제
        /*

            1. JVM이란 무엇인가
                : 사람들이 사용하는 운영체재는 여러가지가 존재합니다. 대표적으로 윈도우, 맥OS, 리눅스 등이 있죠. JAVA로 간단한 프로그램을 작성했다고 생각해봅시다.
                이게 운영체재마다 똑같은 결과물로 실행이 될 수 있을까요? 아닙니다. 운영체재마다 실행되는 방식이 다르기에 하나의 프로그램이라도 각각 코드를 작성해야합니다.
                이런 문제 때문에 나온게 JVM (Java Virtual Marchine) 입니다. JVM 는 운영체재와 Java 의 중계역할로 하나의 코드로 각각의 운영체재에서 같은 결과물을 얻을 수 있게 됩니다.
                대신 JVM 는 각 운영체재에 종속되는 것만 염두해주시면 됩니다.

            2. 컴파일 하는 방법
                : 터미널에서 작성된 자바 파일 경로로 이동합니다
                  javac <파일명.java> 를 명령하면 <파일명.class> 생성되면 끝납니다.K

            3. 실행하는 방법
                : 터미널에서 해당 class 파일이 속한 src 폴더 경로로 이동합니다
                  java <파일명.class> 를 명령하면 실시간으로 기계어로 번역이 되면서 실행이 됩니다

            4. 바이트코드란 무엇인가
                : 자바가상머신이 읽을 수 있는 0과 1로 구성된 언어이다. 1byte 라고 해서 바이트코드라고 한다.
                  자바 컴파일로 자바 파일을 컴파일하면 생성되는 .class 파일이 바이트코드로 이루어져 있다.


            5. JIT 컴파일러란 무엇이며 어떻게 동작하는지
                : Just In Time 약어로 바이트코드로 변환된 .class 파일을 실행될 때 동작되며,
                  해당 운영체재가 읽을 수 있는 기계어(네이티브)로 번역합니다.


            6. JVM 구성 요소
                1) 클래스 로더
                 : .class 의 바이트코드를 읽고 메모리에 저장합니다.
                   -> 로딩    - 클래스를 읽어옵니다
                   -> 링크    - 레퍼런스를 참조합니다
                   -> 초기화   - static 값을 초기화 및 변수에 할당합니다

                2) 메모리
                  -> 메소드 : 클래스 수준의 정보 (이름, 부모 클래스 이름, 메소드, 변수) 를 저장. 공유되는 자원이다
                  -> 힙 : 객체를 저장. 공유 자원이다.
                  -> 스택 : 쓰레드마다 런타임 스택을 만들고 그 안에 메서드 호출을 스택 프레임이라 부르는 블럭으로 쌓는다. 해당 쓰레드가 종료되면 사라진다.
                  -> PC(Program Counter) 레지스터 : 쓰레드마다 쓰레드 내 현재 실행할 instruction의 위치를 가리키는 포인터가 생성
                  -> 네이티브 메소드 스택 : C, C++ 로 작성된 native 저장 영역

                3) 실행엔진
                  -> 인터프리터 : 바이트코드를 한줄 씩 실행한다
                  -> JIT 컴파일러 : 인터프리터 효율을 높이며, 인터프리터가 읽어오는 바이트코드 중 중복되는 걸 발견하면 해당 중복 코드를 모두 네이티브 코드로 바꿔준다.
                                 그 후 인터프리터는 네이티브 코드를 바로 사용할 수 있게 된다.
                  -> GC (Garbage Colletor) : 참조가 끝난 객체를 모아서 정리한다.

                4) 네이티브
                  -> Java 가 아닌 C, C++ 로 작성된 라이브러리이다.

            7. JDK와 JRE의 차이
                -> JRE (Java Runtime Enviroment) : JVM + 라이브러리로 자바 실행 환경으로 구성되어있다
                -> JDK (Java Development Kit) : JRE + 개발툴로 자바 개발환경까지 구성되어있다

        */


    }
}
